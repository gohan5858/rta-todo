/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

export function initiateTimer(projectId: string) {
    return invoke()<number>("initiate_timer", { projectId })
}

export function pauseTimer() {
    return invoke()<null>("pause_timer")
}

export function resumeTimer() {
    return invoke()<null>("resume_timer")
}

export function resetTimer() {
    return invoke()<null>("reset_timer")
}

export function getCurrentTime() {
    return invoke()<number>("get_current_time")
}

export function loadData() {
    return invoke()<SaveData>("load_data")
}

export function setTitle(projectId: string, title: string) {
    return invoke()<null>("set_title", { projectId,title })
}

export function setTheme(theme: string) {
    return invoke()<null>("set_theme", { theme })
}

export function setIsAutoStart(isAutoStart: boolean) {
    return invoke()<null>("set_is_auto_start", { isAutoStart })
}

export function setIsNotificationOfDeadline(isNotificationOfDeadline: boolean) {
    return invoke()<null>("set_is_notification_of_deadline", { isNotificationOfDeadline })
}

export function setIsNotificationExceededGoalLapTime(isNotificationExceededGoalLapTime: boolean) {
    return invoke()<null>("set_is_notification_exceeded_goal_lap_time", { isNotificationExceededGoalLapTime })
}

export function addProject(title: string, deadline: string | null) {
    return invoke()<null>("add_project", { title,deadline })
}

export function fetchProject(projectId: string) {
    return invoke()<Project>("fetch_project", { projectId })
}

export function addTodo(projectId: string, title: string) {
    return invoke()<[Todo[], Todo[]]>("add_todo", { projectId,title })
}

export function removeTodo(projectId: string) {
    return invoke()<Todo[]>("remove_todo", { projectId })
}

export function goToNextTodo(projectId: string, lapTime: number) {
    return invoke()<[Todo[], Todo[]]>("go_to_next_todo", { projectId,lapTime })
}

export function updateCurrentElapsedTime(projectId: string, currentElapsedTime: number) {
    return invoke()<null>("update_current_elapsed_time", { projectId,currentElapsedTime })
}

export function getCurrentElapsedTime(projectId: string) {
    return invoke()<number>("get_current_elapsed_time", { projectId })
}

export function resetCurrentElapsedTime() {
    return invoke()<null>("reset_current_elapsed_time")
}

export type Project = { id: string; title: string; deadline: string | null; currentElapsedTime: number; completed: boolean; todoList: Todo[] }
export type Todo = { id: string; title: string; lapTime: number | null; elapsedTime: number | null; checked: boolean; checkable: boolean; branchName: string | null }
export type SaveData = { theme: string; isAutoStart: boolean; isNotificationOfDeadline: boolean; isNotificationExceededGoalLapTime: boolean; projects: Project[] }
